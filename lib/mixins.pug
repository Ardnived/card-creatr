mixin svg(width, height, viewBox)
	svg(
		version="1.1"
		xmlns="http://www.w3.org/2000/svg"
		xmlns:xlink="http://www.w3.org/1999/xlink"
		width=width
		height=height
		viewBox=viewBox
	)
		block

- _imageFillId = 0
mixin imageFill(image, x, y, width, height)
	defs
		clipPath(id="imageFill-"+_imageFillId)
			rect(x=x, y=y, width=width, height=height)
	- landscape = (width/height) > (image.dims.width/image.dims.height)
	- imgWidth = landscape ? width : height*image.dims.width/image.dims.height
	- imgHeight = landscape ? width*image.dims.height/image.dims.width : height
	- imgX = landscape ? x : x - (imgWidth-width)/2
	- imgY = landscape ? y - (imgHeight-height)/2 : y
	image(x=imgX, y=imgY, width=imgWidth, height=imgHeight, clip-path="url(#imageFill-"+_imageFillId+")", xlink:href=image.dataUri)&attributes(attributes)
	- _imageFillId += 1

mixin text(content)
	- // The following is a hack to render the pug block as the text to be wrapped if the argument is not provided.
	- if (typeof content === "undefined") {
	-   if (block) {
	-     var _pug_html = pug_html;
	-     pug_html = "";
	-     block();
	-     content = pug_html;
	-     pug_html = _pug_html;
	-   } else {
	-     throw new Error("Undefined field in +text(): make sure that all fields referenced in the template exist in the card data");
	-   }
	- }
	- var options = _applyTextDefaults(attributes, _fonts)
	- if (_fontRenderMode === "paths") {
	-   var d = _makeTextPath(content, options)
			path(d=d)&attributes(attributes)
	- } else {
	-   var attrs = _makeTextAttributes(content, options)
			text&attributes(attrs) #{content}
	- }

mixin textWrap(paragraphs)
	- // The following is a hack to render the pug block as the text to be wrapped if the argument is not provided.
	- if (typeof paragraphs === "undefined") {
	-   if (block) {
	-     var _pug_html = pug_html;
	-     pug_html = "";
	-     block();
	-     paragraphs = pug_html;
	-     pug_html = _pug_html;
	-   } else {
	-     throw new Error("Undefined field in +textWrap(): make sure that all fields referenced in the template exist in the card data");
	-   }
	- }
	- if (typeof paragraphs === "string") paragraphs = paragraphs.split("\n");
	- var options = _applyTextWrapDefaults(attributes, _fonts)
	each text in paragraphs
		- if (text.txt) text = text.txt
		- if (!text) text = ""
		each line,i in options.wrappr.wrap(text, options.fontSize, options.width)
			- if (_fontRenderMode === "paths") {
			-   var d = _makeTextPath(line, options)
					path(d=d)&attributes(attributes)
			- } else {
			-   var attrs = _makeTextAttributes(line, options)
					text&attributes(attrs) #{line}
			- }
			- options.y += options.lineHeight
		- options.y += options.paragraphSpacing
